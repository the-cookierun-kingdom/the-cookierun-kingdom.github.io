{"version":3,"sources":["features/app/AppNavbar.tsx","app/hooks.ts","features/coolTime/coolTimeSlice.ts","features/coolTime/coolTimeAPI.ts","features/coolTime/CoolTime.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","index.tsx"],"names":["AppNavbar","className","id","useAppDispatch","useDispatch","useAppSelector","useSelector","requestCoolTimeAsync","createAsyncThunk","a","fetch","then","response","json","catch","error","coolTimeSlice","createSlice","name","initialState","list","selectedType","status","reducers","selectCoolTime","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","coolTime","selectedCoolTime","find","ct","tabList","map","type","CooTimeTab","currentType","tabData","dispatch","onClick","CoolTimeDisplay","role","heroes","join","start_cool","st","idx","time","chance","desc","CoolTable","scope","cool","jewel_no","level_10","level_11","level_12","CoolTime","useEffect","App","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","counterSlice","value","increment","decrement","incrementByAmount","store","configureStore","reducer","counter","counterReducer","coolTimeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc10469f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport function AppNavbar() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand navbar-light bg-light\">\r\n      <div className=\"container\">\r\n        <span className=\"navbar-brand\">Kingdom</span>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto\">\r\n            <li className=\"nav-item\">\r\n              <span className=\"nav-link\">CoolTime</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from '../../app/store';\r\nimport { fetchCoolTime } from './coolTimeAPI';\r\n\r\nexport interface StartCool {\r\n  time: string;\r\n  chance?: number;\r\n  desc?: string;\r\n}\r\n\r\nexport interface CoolTimeRow {\r\n  cool: string;\r\n  jewel_no: number | null;\r\n  level_10: number | null;\r\n  level_11: number | null;\r\n  level_12: number | null;\r\n}\r\n\r\nexport interface CoolTime {\r\n  id: string;\r\n  type: string;\r\n  heroes: string[];\r\n  start_cool: StartCool[];\r\n  list: CoolTimeRow[];\r\n}\r\n\r\nexport interface CoolTimeState {\r\n  list: CoolTime[];\r\n  selectedType: string;\r\n  status: 'idle' | 'loading' | 'failed';\r\n}\r\n\r\nconst initialState: CoolTimeState = {\r\n  list: [],\r\n  selectedType: '',\r\n  status: 'idle',\r\n};\r\n\r\nexport const requestCoolTimeAsync = createAsyncThunk<CoolTime[]>(\r\n  'coolTime/fetchCoolTime',\r\n  async () => {\r\n    const response = await fetchCoolTime();\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const coolTimeSlice = createSlice({\r\n  name: 'coolTime',\r\n  initialState,\r\n  reducers: {\r\n    // selectCoolTime: (state, action: PayloadAction<number>) => {\r\n    //   state.value = action.payload;\r\n    // },\r\n    selectCoolTime: (state, action: PayloadAction<string>) => {\r\n      state.selectedType = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(requestCoolTimeAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(requestCoolTimeAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.list = action.payload;\r\n        state.selectedType = action.payload[0].id;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { selectCoolTime } = coolTimeSlice.actions;\r\n\r\nexport const selectedType = (state: RootState) => state.coolTime.selectedType;\r\nexport const selectedCoolTime = (state: RootState) => state.coolTime.list.find(ct => ct.id === state.coolTime.selectedType);\r\nexport const tabList = (state: RootState) => state.coolTime.list.map(({ id, type }) => ({ id, type }));\r\n\r\nexport default coolTimeSlice.reducer;\r\n\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCoolTime() {\r\n  return fetch('/api/data.json')\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .catch(error => {\r\n      return error;\r\n    })\r\n}\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\r\nimport {\r\n  requestCoolTimeAsync,\r\n  selectedType,\r\n  selectCoolTime,\r\n  selectedCoolTime,\r\n  tabList,\r\n} from \"./coolTimeSlice\";\r\n\r\nfunction CooTimeTab() {\r\n  const currentType = useAppSelector(selectedType);\r\n  const tabData = useAppSelector(tabList);\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <ul className=\"nav nav-tabs my-3\">\r\n      {tabData.map(({id, type}) => (\r\n        <li key={id}>\r\n          <button\r\n            className={`nav-link ${currentType === id && 'active'}`}\r\n            onClick={() => dispatch(selectCoolTime(id))}\r\n          >{type}</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nfunction CoolTimeDisplay() {\r\n  const coolTime = useAppSelector(selectedCoolTime);\r\n\r\n  if (!coolTime) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"alert alert-success\" role=\"alert\">\r\n      <h5 className=\"alert-heading\">일반쿨타임 { coolTime.type }</h5>\r\n      <hr />\r\n      <p className=\"mb-0\">{ coolTime.heroes.join(', ') }</p>\r\n      <ul className=\"mb-0\">\r\n        {coolTime.start_cool.map((st, idx) => (\r\n          <li key={idx}>{ st.time }{ st.chance && `, ${st.chance}%` }{ st.desc && `, ${st.desc}` }</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CoolTable() {\r\n  const coolTime = useAppSelector(selectedCoolTime);\r\n\r\n  return (\r\n    <table className=\"table table-striped text-center\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">일반쿨</th>\r\n          <th scope=\"col\">보물X</th>\r\n          <th scope=\"col\">10렙</th>\r\n          <th scope=\"col\">11렙</th>\r\n          <th scope=\"col\">12렙</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {coolTime && coolTime.list.map((ct, idx) => (\r\n          <tr key={idx} className=\"text-right\">\r\n            <td>{ ct.cool }</td>\r\n            <td>{ ct.jewel_no || 'x' }</td>\r\n            <td>{ ct.level_10 || 'x' }</td>\r\n            <td>{ ct.level_11 || 'x' }</td>\r\n            <td>{ ct.level_12 || 'x' }</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\n\r\nexport function CoolTime() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(requestCoolTimeAsync());\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <CooTimeTab />\r\n      <CoolTimeDisplay />\r\n      <CoolTable />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport { AppNavbar } from './features/app/AppNavbar';\nimport { CoolTime } from './features/coolTime/CoolTime';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppNavbar />\n      <CoolTime />\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport coolTimeReducer from '../features/coolTime/coolTimeSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    coolTime: coolTimeReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}